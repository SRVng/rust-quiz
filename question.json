[
  {
    "question": "Which type cast preserves the mathematical value in all cases?",
    "quote": null,
    "choices": ["i64 as i32", "usize as u64", "i32 as i64", "f64 as f32"],
    "answer": "C"
  },
  {
    "question": "What do the vertical bars represent here",
    "quote": "str::thread::spawn(|| { println!(LinkedIn);});",
    "choices": ["a closure", "a thread", "a future", "a block"],
    "answer": "A"
  },
  {
    "question": "Which choice is not a scalar data type?",
    "quote": null,
    "choices": ["integer", "float", "boolean", "tuple"],
    "answer": "D"
  },
  {
    "question": "_ cannot be destructured",
    "quote": null,
    "choices": ["Traits", "Tuples", "Enums", "Structs"],
    "answer": "A"
  },
  {
    "question": "Which cargo command checks a program for error without creating a binary executable?",
    "quote": null,
    "choices": ["cargo --version", "cargo init", "cargo build", "cargo check"],
    "answer": "D"
  },
  {
    "question": "The term box and related phrases such as boxing a value are often used when relating to memory layout. What does box refer to?",
    "quote": null,
    "choices": [
      "It's creating a pointer on the heap that points to a value on the stack.",
      "It's creating a pointer on the stack that points to a value on the heap.",
      "It's creating a memory guard around values to prevent illegal access.",
      "It's an abstraction that refers to ownership. Boxed values are clearly labelled."
    ],
    "answer": "B"
  },
  {
    "question": "What is an alternative way of writing slice that produces the same result?",
    "quote": "...  let s = String::form(hello);  let slice = &s[0..2];",
    "choices": [
      "let slice = &s[len + 2];",
      "let slice = &s[len - 2];",
      "let slice = &s.copy(0..2);",
      "let slice = &s[..2];"
    ],
    "answer": "D"
  },
  {
    "question": "Using the ? operator at the end of an expression is equivalent to _.",
    "quote": null,
    "choices": [
      "a match pattern that branches into True or False",
      "calling ok_error()",
      "calling panic!()",
      "a match pattern that may result an early return"
    ],
    "answer": "D"
  },
  {
    "question": "What syntax is required to take a mutable reference to T, when used within a function argument?",
    "quote": "fn increment(i: T) {  // body elided  }",
    "choices": ["*mut T", "mut ref T", "mut &T", "&mut T"],
    "answer": "D"
  },
  {
    "question": "The smart pointers Rc and Arc provide reference counting. What is the API for incrementing a reference count?",
    "quote": null,
    "choices": [".add()", ".incr()", ".clone()", ".increment()"],
    "answer": "C"
  },
  {
    "question": "What happens when an error occurs that is being handled by the question mark (?) operator?",
    "quote": null,
    "choices": [
      "The error is reported and execution continues.",
      "An exception is raised. The effect(s) of the exception are defined by the error! macro.",
      "The program panics immediately.",
      "Rust attempts to convert the error to the local function's error type and return it as Result::Err. If that fails, the program panics."
    ],
    "answer": "D"
  },
  {
    "question": "Which comment syntax is not legal?",
    "quote": null,
    "choices": ["/*", "#", "//!", "//"],
    "answer": "B"
  },
  {
    "question": "In matching patterns, values are ignored with _.",
    "quote": null,
    "choices": [".ignore()", "an underscore (_)", "..", "skip"],
    "answer": "C"
  },
  {
    "question": "Defining a _ requires a lifetime parameter.",
    "quote": null,
    "choices": [
      "function that ends the lifetime of one of its arguments",
      "struct that contains a reference to a value",
      "function with generic argument",
      "struct that contains a reference to a boxed value"
    ],
    "answer": "B"
  },
  {
    "question": "Which example correctly uses std::collections::HashMap's Entry API to populate counts?",
    "quote": "use std::collections::HashMap;  fn main() {let mut counts = HashMap::new(); let text = LinkedIn Learning; for c in text.chars() {// Complete this block}  println!({:?}, counts);}",
    "choices": [
        "for c in text.chars() {if let Some(count) = &mut counts.get(&c) {counts.insert(c, *count + 1);} else {counts.insert(c, 1);};}",
        "for c in text.chars() {let count = counts.entry(c).or_insert(0);*count += 1;}",
        "for c in text.chars() {let count = counts.entry(c);*count += 1;}",
        "for c in text.chars() {counts.entry(c).or_insert(0).map(|x| x + 1);}"
    ],
    "answer": "B"
  },
  {
    "question": "Which fragment does not incur memory allocations while writing to a 'file' (represented by a Vec)?",
    "quote": "use std::collections::HashMap; fn main() -> Result<(), Box<dyn std::error::Error>> { let mut v = Vec::<u8>::new();  let a = LinkedIn; let b = 123; let c = 'ðŸ§€'; // replace this line println!({:?}, v); Ok(()) }",
    "choices": [
      "write!(&mut v, {}{}{}, a, b, c)?;",
      "v.write(a)?; v.write(b)?; v.write(c)?;",
      "v.write(a,b,c)?;",
      "v.write_all(a.as_bytes())?; v.write_all(&b.to_string().as_bytes())?; c.encode_utf8(&mut v);"
    ],
    "answer": "A"
  },
  {
    "question": "Does the main function compile? If so, why? If not, what do you need to change?",
    "quote": "fn main() { let Some(x) = some_option_value; }",
    "choices":  [
      "The code does not compile. let statements require a refutable pattern. Add if before let",
      "The code compiles. let statements sometimes require a refutable pattern.",
      "The code does not compile. let statements requires an irrefutable pattern. Add if before let",
      "The code compiles. let do not require a refutable pattern."
    ],
    "answer": "C"
  },
  {
    "question": "Which statement about lifetimes is false?",
    "quote": null,
    "choices": [
      "Lifetimes were redundantly specified in previous version of Rust.",
      "Lifetimes are specified when a struct is holding a reference to a value.",
      "Lifetimes are specified when certain values must outlive others.",
      "Lifetimes are always inferred by the compiler."
    ],
    "answer": "D"
  },
  {
    "question": "When used as a return type, which Rust type plays a similar role to Python's None, JavaScript's null, or the void type in C/C++?",
    "quote": null,
    "choices": [
      "!",
      "None",
      "Null",
      "()"
    ],
    "answer": "D"
  },
  {
    "question": "To convert a Result to an Option, which method should you use?",
    "quote": null,
    "choices": [
      ".as_option()",
      ".ok()",
      ".to_option()",
      ".into()"
    ],
    "answer": "B"
  },
  {
    "question": "Which statement about the Clone and Copy traits is false?",
    "quote": null,
    "choices": [
      "Copy is enabled for primitive, built-in types.",
      "Without Copy, Rust applies move semantics to a type's access.",
      "When using Clone, copying data is explicit.",
      "Until a type implements either Copy or Clone, its internal data cannot be copied."
    ],
    "answer": "A"
  },
  {
    "question": "Why does this code not compile?",
    "quote": "fn returns_closure() -> dyn Fn(i32) -> i32 { |x| x + 1 }",
    "choices": [
      "The returned fn pointer and value need to be represented by another trait.",
      "Closures are types, so they cannot be returned directly from a function.",
      "Closures are types and can be returned only if the concrete trait is implemented.",
      "Closures are represented by traits, so they cannot be a return type."
    ],
    "answer": "D"
  },
  {
    "question": "What smart pointer is used to allow multiple ownership of a value in various threads?",
    "quote": null,
    "choices": [
      "Arc<T>",
      "Box<T>",
      "Both Arc<T> and Rec<T> are multithread safe.",
      "Rc<T>"
    ],
    "answer": "A"
  },
  {
    "question": "Which types are not allowed within an enum variant's body",
    "quote": null,
    "choices": [
      "zero-sized types",
      "structs",
      "trait objects",
      "floating-point numbers"
    ],
    "answer": "C"
  },
  {
    "question": "Which statement about this code is true?",
    "quote": "fn main() { let c = 'z'; let heart_eyed_cat = 'ðŸ˜º'; }",
    "choices": [
      "Both are character literals.",
      "heart_eyed_cat is an invalid expression.",
      "c is a string literal and heart_eyed_cat is a character literal.",
      "Both are string literals"
    ],
    "answer": "A"
  },
  {
    "question": "Your application requires a single copy of some data type T to be held in memory that can be accessed by multiple threads. What is the thread-safe wrapper type?",
    "quote": null,
    "choices": [
      "Mutex<Arc<T>>",
      "Rc<Mutex<T>>",
      "Arc<Mutex<T>>",
      "Mutex<Rc<T>>"
    ],
    "answer": "C"
  },
  {
    "question": "Which idiom can be used to concatenate the strings a, b, c?",
    "quote": "let a = 'a'.to_string(); let b = 'b'.to_string(); let c = 'c'.to_string();",
    "choices": [
      "String::from(a, b, c)",
      "format!({}{}{}, a, b, c)",
      "concat(a, b, c)",
      "a + b + c"
    ],
    "answer": "B"
  },
  {
    "question": "In this function, what level of access is provided to the variable a?",
    "quote": "use std::fmt::Debug; fn report<T: Debug>(a: &T) { eprintln!(Info: {:?}, a) }; }",
    "choices": [
      "print",
      "read-only",
      "read/write",
      "debug"
    ],
    "answer": "B"
  },
  {
    "question": "Which choice is not valid loop syntax?",
    "quote": null,
    "choices": [
      "loop",
      "for",
      "while",
      "do"
    ],
    "answer": "D"
  },
  {
    "question": "How do you construct a value of Status that is initialized to Waiting?",
    "quote": "enum Status { Waiting, Busy, Error(String) }",
    "choices": [
      "let s = Enum::new(Status::Waiting);",
      "let s = new Status::Waiting;",
      "let s = Status::Waiting;",
      "let s = Status::new(Waiting);"
    ],
    "answer": "C"
  },
  {
    "question": "Which statement about enums is false?",
    "quote": null,
    "choices": [
      "Enums are useful in matching patterns.",
      "Option is an enum type.",
      "Enum variants can have different types with associated data.",
      "The tern enum is short form enummap"
    ],
    "answer": "D"
  },
  {
    "question": "What does an underscore ( _ ) indicate when used as pattern?",
    "quote": null,
    "choices": [
      "It matches everything.",
      "It matches underscores.",
      "It matches any value that has a length of 1.",
      "It matches nothing."
    ],
    "answer": "A"
  },
  {
    "question": "What is safe operation on a std::cell::UnsafeCell<T>?",
    "quote": null,
    "choices": [
      "A &mut T reference is allowed. However it may not cpexists with any other references. and may be created only in single-threaded code.",
      "UnsafeCell<T> provides thread-safety. Therefore, creating &T references from multiple threads is safe.",
      "The only safe operation is the .get() method, which returns only a raw pointer.",
      "Non. UnsafeCell<T> only allows code that would otherwise need unsafe blocks to be written in safe code."
    ],
    "answer": "C"
  },
  {
    "question": "Generics are urlful when you _.",
    "quote": null,
    "choices": [
      "need to reduce code duplication by concretizing values and restricting parameters in functions",
      "need to reduce code duplication by abstracting values further, such as in function parameters",
      "need a supertrait",
      "are not sure if you need a specific kind of trait"
    ],
    "answer": "B"
  },
  {
    "question": "How do you create a Rust project on the command-line?",
    "quote": null,
    "choices": [
      "cargo new",
      "rustup init",
      "cargo start",
      "rust new-project"
    ],
    "answer": "A"
  },
  {
    "question": "Calling.clone() _.",
    "quote": null,
    "choices": [
      "deeply copies heap data and clones ownership",
      "clones the pointer to the heap",
      "clones the heap data onto the stack",
      "deeply copies heap and stack"
    ],
    "answer": "B"
  },
  {
    "question": "What is one of the roles of the let keyword?",
    "quote": "let text = String::new(LinkedIn);",
    "choices": [
      "Create a text object.",
      "Assign a mutable value.",
      "request to borrow a string.",
      "Assign an immutable value."
    ],
    "answer": "C"
  },
  {
    "question": "How is a new enum initialized?",
    "quote": "enum Option_i32 { Some(i32), None }",
    "choices": [
      "let integer = Option_i32::Some(5);",
      "let integer = Option_i32.new(Some(5))",
      "let integer = Option_i32::New::(Some(5))",
      "let integer = Option_i32.init()"
    ],
    "answer": "A"
  },
  {
    "question": "What are the main difference between const and static?",
    "quote": null,
    "choices": [
      "They can be used interchangeably, but const only supports primitive types while static must be used for structs and user-defined types.",
      "They can be used interchangeably, but const values are compiled at compile time.",
      "Values defined with const live in the stack, while static values live on the heap.",
      "Values defined with const can be copied to wherever they are needed, whereas static values remain in a fixed place in memory."
    ],
    "answer": "D"
  },
  {
    "question": "Which Rust data type represents a signed integer that has the same width as a pointer of the compile target's CPU",
    "quote": null,
    "choices": ["i64", "int64", "isize", "int"],
    "answer": "C"
  },
  {
    "question": "When are supertraits needed?",
    "quote": null,
    "choices": [
      "When a trait is needed for multiple structs",
      "When a trait depends on another trait",
      "Only when a generic trait is used",
      "When a metatrait is needed to use another trait"
    ],
    "answer": "B"
  }
]
